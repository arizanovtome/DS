(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common/http'), require('@angular/core'), require('rxjs'), require('rxjs/operators'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('ngx-typeahead', ['exports', '@angular/common/http', '@angular/core', 'rxjs', 'rxjs/operators', '@angular/common'], factory) :
    (global = global || self, factory(global['ngx-typeahead'] = {}, global.ng.common.http, global.ng.core, global.rxjs, global.rxjs.operators, global.ng.common));
}(this, (function (exports, http, core, rxjs, operators, common) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __createBinding(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }

    function __exportStar(m, exports) {
        for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }

    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    var Key;
    (function (Key) {
        Key["Backspace"] = "Backspace";
        Key["Tab"] = "Tab";
        Key["Enter"] = "Enter";
        Key["ShiftLeft"] = "ShiftLeft";
        Key["ShiftRight"] = "ShiftRight";
        Key["Escape"] = "Escape";
        Key["ArrowLeft"] = "ArrowLeft";
        Key["ArrowRight"] = "ArrowRight";
        Key["ArrowUp"] = "ArrowUp";
        Key["ArrowDown"] = "ArrowDown";
        // http://unixpapa.com/js/key.html
        Key["MetaLeft"] = "MetaLeft";
        Key["MetaRight"] = "MetaRight";
    })(Key || (Key = {}));

    function validateNonCharKeyCode(keyCode) {
        return [
            Key.Enter,
            Key.Tab,
            Key.ShiftLeft,
            Key.ShiftRight,
            Key.ArrowLeft,
            Key.ArrowUp,
            Key.ArrowRight,
            Key.ArrowDown,
            Key.MetaLeft,
            Key.MetaRight,
        ].every(function (codeKey) { return codeKey !== keyCode; });
    }
    function validateArrowKeys(keyCode) {
        return keyCode === Key.ArrowDown || keyCode === Key.ArrowUp;
    }
    function isIndexActive(index, currentIndex) {
        return index === currentIndex;
    }
    function isEnterKey(event) {
        return event.code === Key.Enter;
    }
    function isEscapeKey(event) {
        // tslint:disable-next-line: deprecation
        return event.code === Key.Escape;
    }
    function createParamsForQuery(query, queryParamKey, customParams) {
        var _a;
        if (queryParamKey === void 0) { queryParamKey = 'q'; }
        if (customParams === void 0) { customParams = {}; }
        var searchParams = __assign((_a = {}, _a[queryParamKey] = query, _a), customParams);
        // tslint:disable-next-line
        var setParam = function (acc, param) {
            return acc.set(param, searchParams[param]);
        };
        var params = Object.keys(searchParams).reduce(setParam, new http.HttpParams());
        return params;
    }
    function resolveApiMethod(method) {
        if (method === void 0) { method = ''; }
        var isMethodValid = [
            'get',
            'post',
            'put',
            'delete',
            'patch',
            'request',
        ].some(function (methodName) { return method === methodName; });
        var apiMethod = isMethodValid ? method : 'get';
        return apiMethod;
    }
    var NO_INDEX = -1;
    function resolveNextIndex(currentIndex, stepUp, listLength) {
        if (listLength === void 0) { listLength = 10; }
        var step = stepUp ? 1 : -1;
        var topLimit = listLength - 1;
        var bottomLimit = NO_INDEX;
        var currentResultIndex = currentIndex + step;
        var resultIndex = currentResultIndex;
        if (currentResultIndex === topLimit + 1) {
            resultIndex = bottomLimit;
        }
        if (currentResultIndex === bottomLimit - 1) {
            resultIndex = topLimit;
        }
        return resultIndex;
    }
    function toJsonpSingleResult(response) {
        return response[1];
    }
    function toJsonpFinalResults(results) {
        return results.map(function (result) { return result[0]; });
    }
    function hasCharacters(query) {
        return query.length > 0;
    }
    function toFormControlValue(e) {
        return e.target.value;
    }
    function resolveItemValue(item, fieldsToExtract, caseSensitive) {
        if (caseSensitive === void 0) { caseSensitive = false; }
        var newItem = item;
        if (!item.hasOwnProperty('length')) {
            var fields = !fieldsToExtract.length
                ? Object.keys(item)
                : fieldsToExtract;
            newItem = fields.reduce(function (acc, cur) { return "" + acc + item[cur]; }, '');
        }
        return caseSensitive ? newItem : newItem.toLowerCase();
    }

    /*
     using an external template:
     <input [taItemTpl]="itemTpl" >

      <ng-template #itemTpl let-result>
        <strong>MY {{ result.result }}</strong>
      </ng-template>
    */
    var NgxTypeAheadComponent = /** @class */ (function () {
        function NgxTypeAheadComponent(element, viewContainer, http, cdr) {
            this.element = element;
            this.viewContainer = viewContainer;
            this.http = http;
            this.cdr = cdr;
            this.showSuggestions = false;
            this.results = [];
            this.taUrl = '';
            this.taParams = {};
            this.taQueryParam = 'q';
            this.taApi = 'jsonp';
            this.taApiMethod = 'get';
            this.taList = [];
            this.taListItemField = [];
            this.taListItemLabel = '';
            this.taDebounce = 300;
            this.taAllowEmpty = false;
            this.taCaseSensitive = false;
            this.taDisplayOnFocus = false;
            this.taSelected = new core.EventEmitter();
            this.suggestionIndex = 0;
            this.subscriptions = [];
            this.activeResult = '';
            this.searchQuery = '';
            this.selectedItem = {};
            this.resultsAsItems = [];
            this.keydown$ = new rxjs.Subject();
            this.keyup$ = new rxjs.Subject();
        }
        NgxTypeAheadComponent.prototype.handleEsc = function (event) {
            if (isEscapeKey(event)) {
                this.hideSuggestions();
                event.preventDefault();
            }
            this.keydown$.next(event);
        };
        NgxTypeAheadComponent.prototype.onkeyup = function (event) {
            event.preventDefault();
            event.stopPropagation();
            this.keyup$.next(event);
        };
        NgxTypeAheadComponent.prototype.onClick = function () {
            if (this.taDisplayOnFocus) {
                this.displaySuggestions();
            }
        };
        NgxTypeAheadComponent.prototype.ngOnInit = function () {
            this.filterEnterEvent(this.keydown$);
            this.listenAndSuggest(this.keyup$);
            this.navigateWithArrows(this.keydown$);
            this.renderTemplate();
        };
        NgxTypeAheadComponent.prototype.ngOnDestroy = function () {
            this.keydown$.complete();
            this.keyup$.complete();
        };
        NgxTypeAheadComponent.prototype.renderTemplate = function () {
            if (!this.suggestionsTplRef) {
                console.error('NO NGXTA Template Found. Requires NG9');
                return;
            }
            this.viewContainer.createEmbeddedView(this.suggestionsTplRef);
            this.cdr.markForCheck();
        };
        NgxTypeAheadComponent.prototype.listenAndSuggest = function (obs) {
            var _this = this;
            obs
                .pipe(
            // tslint:disable-next-line: deprecation
            operators.filter(function (e) { return validateNonCharKeyCode(e.code); }), operators.map(toFormControlValue), operators.debounceTime(this.taDebounce), 
            // tslint:disable-next-line: deprecation
            operators.concat(), operators.distinctUntilChanged(), operators.filter(function (query) { return _this.taAllowEmpty || hasCharacters(query); }), operators.tap(function (query) { return (_this.searchQuery = query); }), operators.switchMap(function (query) { return _this.suggest(query); }))
                .subscribe(function (results) {
                _this.assignResults(results);
                // this.updateIndex(Key.ArrowDown);
                _this.displaySuggestions();
            });
        };
        NgxTypeAheadComponent.prototype.assignResults = function (results) {
            var labelForDisplay = this.taListItemLabel;
            this.resultsAsItems = results;
            this.results = results.map(function (item) {
                return labelForDisplay ? item[labelForDisplay] : item;
            });
            this.suggestionIndex = NO_INDEX;
            if (!results || !results.length) {
                this.activeResult = this.searchQuery;
            }
        };
        NgxTypeAheadComponent.prototype.filterEnterEvent = function (elementObs) {
            var _this = this;
            elementObs.pipe(operators.filter(isEnterKey)).subscribe(function (event) {
                _this.handleSelectSuggestion(_this.activeResult);
            });
        };
        NgxTypeAheadComponent.prototype.navigateWithArrows = function (elementObs) {
            var _this = this;
            elementObs
                .pipe(operators.filter(function (e) { return validateArrowKeys(e.keyCode); }), operators.map(function (e) { return e.keyCode; }))
                .subscribe(function (keyCode) {
                _this.updateIndex(keyCode);
                _this.displaySuggestions();
            });
        };
        NgxTypeAheadComponent.prototype.updateIndex = function (keyCode) {
            this.suggestionIndex = resolveNextIndex(this.suggestionIndex, keyCode === Key.ArrowDown, this.results.length);
        };
        NgxTypeAheadComponent.prototype.displaySuggestions = function () {
            this.showSuggestions = true;
            this.cdr.markForCheck();
        };
        NgxTypeAheadComponent.prototype.suggest = function (query) {
            return this.taList.length
                ? this.createListSource(this.taList, query)
                : this.request(query);
        };
        /**
         * peforms a jsonp/http request to search with query and params
         * @param query the query to search from the remote source
         */
        NgxTypeAheadComponent.prototype.request = function (query) {
            var url = this.taUrl;
            var searchConfig = createParamsForQuery(query, this.taQueryParam, this.taParams);
            var options = {
                params: searchConfig,
            };
            var isJsonpApi = this.taApi === 'jsonp';
            return isJsonpApi
                ? this.requestJsonp(url, options, this.taCallbackParamValue)
                : this.requestHttp(url, options);
        };
        NgxTypeAheadComponent.prototype.requestHttp = function (url, options) {
            var apiMethod = resolveApiMethod(this.taApiMethod);
            return this.http[apiMethod](url, options);
        };
        NgxTypeAheadComponent.prototype.requestJsonp = function (url, options, callback) {
            if (callback === void 0) { callback = 'callback'; }
            var params = options.params.toString();
            return this.http
                .jsonp(url + "?" + params, callback)
                .pipe(operators.map(toJsonpSingleResult), operators.map(toJsonpFinalResults));
        };
        NgxTypeAheadComponent.prototype.markIsActive = function (index, result) {
            var isActive = isIndexActive(index, this.suggestionIndex);
            if (isActive) {
                this.activeResult = result;
            }
            return isActive;
        };
        NgxTypeAheadComponent.prototype.handleSelectionClick = function (suggestion, index) {
            this.suggestionIndex = index;
            this.handleSelectSuggestion(suggestion);
        };
        NgxTypeAheadComponent.prototype.handleSelectSuggestion = function (suggestion) {
            var result = this.resultsAsItems.length
                ? this.resultsAsItems[this.suggestionIndex]
                : suggestion;
            this.hideSuggestions();
            var resolvedResult = this.suggestionIndex === NO_INDEX ? this.searchQuery : result;
            this.taSelected.emit(resolvedResult);
        };
        NgxTypeAheadComponent.prototype.hideSuggestions = function () {
            this.showSuggestions = false;
        };
        NgxTypeAheadComponent.prototype.hasItemTemplate = function () {
            return this.taItemTpl !== undefined;
        };
        NgxTypeAheadComponent.prototype.createListSource = function (list, query) {
            var _this = this;
            var sanitizedQuery = this.taCaseSensitive ? query : query.toLowerCase();
            var fieldsToExtract = this.taListItemField;
            return rxjs.of(list.filter(function (item) {
                return resolveItemValue(item, fieldsToExtract, _this.taCaseSensitive).includes(sanitizedQuery);
            }));
        };
        NgxTypeAheadComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: core.ViewContainerRef },
            { type: http.HttpClient },
            { type: core.ChangeDetectorRef }
        ]; };
        __decorate([
            core.Input()
        ], NgxTypeAheadComponent.prototype, "taItemTpl", void 0);
        __decorate([
            core.Input()
        ], NgxTypeAheadComponent.prototype, "taUrl", void 0);
        __decorate([
            core.Input()
        ], NgxTypeAheadComponent.prototype, "taParams", void 0);
        __decorate([
            core.Input()
        ], NgxTypeAheadComponent.prototype, "taQueryParam", void 0);
        __decorate([
            core.Input()
        ], NgxTypeAheadComponent.prototype, "taCallbackParamValue", void 0);
        __decorate([
            core.Input()
        ], NgxTypeAheadComponent.prototype, "taApi", void 0);
        __decorate([
            core.Input()
        ], NgxTypeAheadComponent.prototype, "taApiMethod", void 0);
        __decorate([
            core.Input()
        ], NgxTypeAheadComponent.prototype, "taList", void 0);
        __decorate([
            core.Input()
        ], NgxTypeAheadComponent.prototype, "taListItemField", void 0);
        __decorate([
            core.Input()
        ], NgxTypeAheadComponent.prototype, "taListItemLabel", void 0);
        __decorate([
            core.Input()
        ], NgxTypeAheadComponent.prototype, "taDebounce", void 0);
        __decorate([
            core.Input()
        ], NgxTypeAheadComponent.prototype, "taAllowEmpty", void 0);
        __decorate([
            core.Input()
        ], NgxTypeAheadComponent.prototype, "taCaseSensitive", void 0);
        __decorate([
            core.Input()
        ], NgxTypeAheadComponent.prototype, "taDisplayOnFocus", void 0);
        __decorate([
            core.Output()
        ], NgxTypeAheadComponent.prototype, "taSelected", void 0);
        __decorate([
            core.ViewChild(core.TemplateRef, { static: true })
        ], NgxTypeAheadComponent.prototype, "suggestionsTplRef", void 0);
        __decorate([
            core.HostListener('keydown', ['$event'])
        ], NgxTypeAheadComponent.prototype, "handleEsc", null);
        __decorate([
            core.HostListener('keyup', ['$event'])
        ], NgxTypeAheadComponent.prototype, "onkeyup", null);
        __decorate([
            core.HostListener('click')
        ], NgxTypeAheadComponent.prototype, "onClick", null);
        NgxTypeAheadComponent = __decorate([
            core.Component({
                // tslint:disable-next-line: component-selector
                selector: 'ngx-typeahead, [ngxTypeahead]',
                template: "\n    <ng-template #suggestionsTplRef>\n      <section class=\"ta-results list-group\" *ngIf=\"showSuggestions\">\n        <div class=\"ta-backdrop\" (click)=\"hideSuggestions()\"></div>\n        <button\n          type=\"button\"\n          class=\"ta-item list-group-item\"\n          *ngFor=\"let result of results; let i = index\"\n          [class.active]=\"markIsActive(i, result)\"\n          (click)=\"handleSelectionClick(result, i)\"\n        >\n          <span *ngIf=\"!taItemTpl\"\n            ><i class=\"fa fa-search\"></i> {{ result }}</span\n          >\n          <ng-template\n            [ngTemplateOutlet]=\"taItemTpl\"\n            [ngTemplateOutletContext]=\"{\n              $implicit: { result: result, index: i }\n            }\"\n          ></ng-template>\n        </button>\n      </section>\n    </ng-template>\n  ",
                styles: ["\n      .ta-results {\n        position: absolute;\n      }\n      .ta-backdrop {\n        bottom: 0;\n        left: 0;\n        position: fixed;\n        right: 0;\n        top: 0;\n        z-index: 1;\n      }\n      .ta-item {\n        position: relative;\n        z-index: 2;\n        display: block;\n      }\n    "]
            })
        ], NgxTypeAheadComponent);
        return NgxTypeAheadComponent;
    }());

    var NgxTypeaheadModule = /** @class */ (function () {
        function NgxTypeaheadModule() {
        }
        NgxTypeaheadModule = __decorate([
            core.NgModule({
                declarations: [NgxTypeAheadComponent],
                imports: [common.CommonModule, http.HttpClientModule, http.HttpClientJsonpModule],
                exports: [NgxTypeAheadComponent, common.CommonModule]
            })
        ], NgxTypeaheadModule);
        return NgxTypeaheadModule;
    }());

    exports.NgxTypeAheadComponent = NgxTypeAheadComponent;
    exports.NgxTypeaheadModule = NgxTypeaheadModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-typeahead.umd.js.map
