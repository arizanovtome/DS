import { __assign } from "tslib";
import { HttpParams } from '@angular/common/http';
import { Key } from './models';
export function validateNonCharKeyCode(keyCode) {
    return [
        Key.Enter,
        Key.Tab,
        Key.ShiftLeft,
        Key.ShiftRight,
        Key.ArrowLeft,
        Key.ArrowUp,
        Key.ArrowRight,
        Key.ArrowDown,
        Key.MetaLeft,
        Key.MetaRight,
    ].every(function (codeKey) { return codeKey !== keyCode; });
}
export function validateArrowKeys(keyCode) {
    return keyCode === Key.ArrowDown || keyCode === Key.ArrowUp;
}
export function isIndexActive(index, currentIndex) {
    return index === currentIndex;
}
export function isEnterKey(event) {
    return event.code === Key.Enter;
}
export function isEscapeKey(event) {
    // tslint:disable-next-line: deprecation
    return event.code === Key.Escape;
}
export function createParamsForQuery(query, queryParamKey, customParams) {
    var _a;
    if (queryParamKey === void 0) { queryParamKey = 'q'; }
    if (customParams === void 0) { customParams = {}; }
    var searchParams = __assign((_a = {}, _a[queryParamKey] = query, _a), customParams);
    // tslint:disable-next-line
    var setParam = function (acc, param) {
        return acc.set(param, searchParams[param]);
    };
    var params = Object.keys(searchParams).reduce(setParam, new HttpParams());
    return params;
}
export function resolveApiMethod(method) {
    if (method === void 0) { method = ''; }
    var isMethodValid = [
        'get',
        'post',
        'put',
        'delete',
        'patch',
        'request',
    ].some(function (methodName) { return method === methodName; });
    var apiMethod = isMethodValid ? method : 'get';
    return apiMethod;
}
export var NO_INDEX = -1;
export function resolveNextIndex(currentIndex, stepUp, listLength) {
    if (listLength === void 0) { listLength = 10; }
    var step = stepUp ? 1 : -1;
    var topLimit = listLength - 1;
    var bottomLimit = NO_INDEX;
    var currentResultIndex = currentIndex + step;
    var resultIndex = currentResultIndex;
    if (currentResultIndex === topLimit + 1) {
        resultIndex = bottomLimit;
    }
    if (currentResultIndex === bottomLimit - 1) {
        resultIndex = topLimit;
    }
    return resultIndex;
}
export function toJsonpSingleResult(response) {
    return response[1];
}
export function toJsonpFinalResults(results) {
    return results.map(function (result) { return result[0]; });
}
export function hasCharacters(query) {
    return query.length > 0;
}
export function toFormControlValue(e) {
    return e.target.value;
}
export function resolveItemValue(item, fieldsToExtract, caseSensitive) {
    if (caseSensitive === void 0) { caseSensitive = false; }
    var newItem = item;
    if (!item.hasOwnProperty('length')) {
        var fields = !fieldsToExtract.length
            ? Object.keys(item)
            : fieldsToExtract;
        newItem = fields.reduce(function (acc, cur) { return "" + acc + item[cur]; }, '');
    }
    return caseSensitive ? newItem : newItem.toLowerCase();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXR5cGVhaGVhZC51dGlscy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC10eXBlYWhlYWQvIiwic291cmNlcyI6WyJsaWIvbmd4LXR5cGVhaGVhZC51dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFFL0IsTUFBTSxVQUFVLHNCQUFzQixDQUFDLE9BQWU7SUFDcEQsT0FBTztRQUNMLEdBQUcsQ0FBQyxLQUFLO1FBQ1QsR0FBRyxDQUFDLEdBQUc7UUFDUCxHQUFHLENBQUMsU0FBUztRQUNiLEdBQUcsQ0FBQyxVQUFVO1FBQ2QsR0FBRyxDQUFDLFNBQVM7UUFDYixHQUFHLENBQUMsT0FBTztRQUNYLEdBQUcsQ0FBQyxVQUFVO1FBQ2QsR0FBRyxDQUFDLFNBQVM7UUFDYixHQUFHLENBQUMsUUFBUTtRQUNaLEdBQUcsQ0FBQyxTQUFTO0tBQ2QsQ0FBQyxLQUFLLENBQUMsVUFBQyxPQUFPLElBQUssT0FBQSxPQUFPLEtBQUssT0FBTyxFQUFuQixDQUFtQixDQUFDLENBQUM7QUFDNUMsQ0FBQztBQUVELE1BQU0sVUFBVSxpQkFBaUIsQ0FBQyxPQUFlO0lBQy9DLE9BQU8sT0FBTyxLQUFLLEdBQUcsQ0FBQyxTQUFTLElBQUksT0FBTyxLQUFLLEdBQUcsQ0FBQyxPQUFPLENBQUM7QUFDOUQsQ0FBQztBQUVELE1BQU0sVUFBVSxhQUFhLENBQUMsS0FBYSxFQUFFLFlBQW9CO0lBQy9ELE9BQU8sS0FBSyxLQUFLLFlBQVksQ0FBQztBQUNoQyxDQUFDO0FBRUQsTUFBTSxVQUFVLFVBQVUsQ0FBQyxLQUFvQjtJQUM3QyxPQUFPLEtBQUssQ0FBQyxJQUFJLEtBQUssR0FBRyxDQUFDLEtBQUssQ0FBQztBQUNsQyxDQUFDO0FBRUQsTUFBTSxVQUFVLFdBQVcsQ0FBQyxLQUFvQjtJQUM5Qyx3Q0FBd0M7SUFDeEMs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LE9BQU8sR0FBRyxJQUFJLENBQUM7SUFDbkIsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDbEMsSUFBTSxNQUFNLEdBQUcsQ0FBQyxlQUFlLENBQUMsTUFBTTtZQUNwQyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7WUFDbkIsQ0FBQyxDQUFDLGVBQWUsQ0FBQztRQUNwQixPQUFPLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxVQUFDLEdBQUcsRUFBRSxHQUFHLElBQUssT0FBQSxLQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFHLEVBQXBCLENBQW9CLEVBQUUsRUFBRSxDQUFDLENBQUM7S0FDakU7SUFDRCxPQUFPLGFBQWEsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLENBQUM7QUFDekQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBQYXJhbXMgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBLZXkgfSBmcm9tICcuL21vZGVscyc7XG5cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZU5vbkNoYXJLZXlDb2RlKGtleUNvZGU6IHN0cmluZykge1xuICByZXR1cm4gW1xuICAgIEtleS5FbnRlcixcbiAgICBLZXkuVGFiLFxuICAgIEtleS5TaGlmdExlZnQsXG4gICAgS2V5LlNoaWZ0UmlnaHQsXG4gICAgS2V5LkFycm93TGVmdCxcbiAgICBLZXkuQXJyb3dVcCxcbiAgICBLZXkuQXJyb3dSaWdodCxcbiAgICBLZXkuQXJyb3dEb3duLFxuICAgIEtleS5NZXRhTGVmdCxcbiAgICBLZXkuTWV0YVJpZ2h0LFxuICBdLmV2ZXJ5KChjb2RlS2V5KSA9PiBjb2RlS2V5ICE9PSBrZXlDb2RlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlQXJyb3dLZXlzKGtleUNvZGU6IHN0cmluZykge1xuICByZXR1cm4ga2V5Q29kZSA9PT0gS2V5LkFycm93RG93biB8fCBrZXlDb2RlID09PSBLZXkuQXJyb3dVcDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzSW5kZXhBY3RpdmUoaW5kZXg6IG51bWJlciwgY3VycmVudEluZGV4OiBudW1iZXIpIHtcbiAgcmV0dXJuIGluZGV4ID09PSBjdXJyZW50SW5kZXg7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0VudGVyS2V5KGV2ZW50OiBLZXlib2FyZEV2ZW50KSB7XG4gIHJldHVybiBldmVudC5jb2RlID09PSBLZXkuRW50ZXI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0VzY2FwZUtleShldmVudDogS2V5Ym9hcmRFdmVudCkge1xuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IGRlcHJlY2F0aW9uXG4gIHJldHVybiBldmVudC5jb2RlID09PSBLZXkuRXNjYXBlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUGFyYW1zRm9yUXVlcnkoXG4gIHF1ZXJ5OiBzdHJpbmcsXG4gIHF1ZXJ5UGFyYW1LZXkgPSAncScsXG4gIGN1c3RvbVBhcmFtcyA9IHt9XG4pIHtcbiAgY29uc3Qgc2VhcmNoUGFyYW1zID0ge1xuICAgIFtxdWVyeVBhcmFtS2V5XTogcXVlcnksXG4gICAgLi4uY3VzdG9tUGFyYW1zLFxuICB9O1xuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmVcbiAgY29uc3Qgc2V0UGFyYW0gPSAoYWNjOiBIdHRwUGFyYW1zLCBwYXJhbTogc3RyaW5nKSA9PlxuICAgIGFjYy5zZXQocGFyYW0sIHNlYXJjaFBhcmFtc1twYXJhbV0pO1xuICBjb25zdCBwYXJhbXMgPSBPYmplY3Qua2V5cyhzZWFyY2hQYXJhbXMpLnJlZHVjZShzZXRQYXJhbSwgbmV3IEh0dHBQYXJhbXMoKSk7XG4gIHJldHVybiBwYXJhbXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZXNvbHZlQXBpTWV0aG9kKG1ldGhvZCA9ICcnKSB7XG4gIGNvbnN0IGlzTWV0aG9kVmFsaWQgPSBbXG4gICAgJ2dldCcsXG4gICAgJ3Bvc3QnLFxuICAgICdwdXQnLFxuICAgICdkZWxldGUnLFxuICAgICdwYXRjaCcsXG4gICAgJ3JlcXVlc3QnLFxuICBdLnNvbWUoKG1ldGhvZE5hbWUpID0+IG1ldGhvZCA9PT0gbWV0aG9kTmFtZSk7XG4gIGNvbnN0IGFwaU1ldGhvZCA9IGlzTWV0aG9kVmFsaWQgPyBtZXRob2QgOiAnZ2V0JztcbiAgcmV0dXJuIGFwaU1ldGhvZDtcbn1cbmV4cG9ydCBjb25zdCBOT19JTkRFWCA9IC0xO1xuZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmVOZXh0SW5kZXgoXG4gIGN1cnJlbnRJbmRleDogbnVtYmVyLFxuICBzdGVwVXA6IGJvb2xlYW4sXG4gIGxpc3RMZW5ndGggPSAxMFxuKSB7XG4gIGNvbnN0IHN0ZXAgPSBzdGVwVXAgPyAxIDogLTE7XG4gIGNvbnN0IHRvcExpbWl0ID0gbGlzdExlbmd0aCAtIDE7XG4gIGNvbnN0IGJvdHRvbUxpbWl0ID0gTk9fSU5ERVg7XG4gIGNvbnN0IGN1cnJlbnRSZXN1bHRJbmRleCA9IGN1cnJlbnRJbmRleCArIHN0ZXA7XG4gIGxldCByZXN1bHRJbmRleCA9IGN1cnJlbnRSZXN1bHRJbmRleDtcbiAgaWYgKGN1cnJlbnRSZXN1bHRJbmRleCA9PT0gdG9wTGltaXQgKyAxKSB7XG4gICAgcmVzdWx0SW5kZXggPSBib3R0b21MaW1pdDtcbiAgfVxuICBpZiAoY3VycmVudFJlc3VsdEluZGV4ID09PSBib3R0b21MaW1pdCAtIDEpIHtcbiAgICByZXN1bHRJbmRleCA9IHRvcExpbWl0O1xuICB9XG4gIHJldHVybiByZXN1bHRJbmRleDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRvSnNvbnBTaW5nbGVSZXN1bHQocmVzcG9uc2U6IGFueSkge1xuICByZXR1cm4gcmVzcG9uc2VbMV07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0b0pzb25wRmluYWxSZXN1bHRzKHJlc3VsdHM6IGFueVtdKSB7XG4gIHJldHVybiByZXN1bHRzLm1hcCgocmVzdWx0OiBhbnkpID0+IHJlc3VsdFswXSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoYXNDaGFyYWN0ZXJzKHF1ZXJ5OiBzdHJpbmcpIHtcbiAgcmV0dXJuIHF1ZXJ5Lmxlbmd0aCA+IDA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0b0Zvcm1Db250cm9sVmFsdWUoZTogYW55KSB7XG4gIHJldHVybiBlLnRhcmdldC52YWx1ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmVJdGVtVmFsdWUoXG4gIGl0ZW06IHN0cmluZyB8IGFueSxcbiAgZmllbGRzVG9FeHRyYWN0OiBzdHJpbmdbXSxcbiAgY2FzZVNlbnNpdGl2ZSA9IGZhbHNlXG4pIHtcbiAgbGV0IG5ld0l0ZW0gPSBpdGVtO1xuICBpZiAoIWl0ZW0uaGFzT3duUHJvcGVydHkoJ2xlbmd0aCcpKSB7XG4gICAgY29uc3QgZmllbGRzID0gIWZpZWxkc1RvRXh0cmFjdC5sZW5ndGhcbiAgICAgID8gT2JqZWN0LmtleXMoaXRlbSlcbiAgICAgIDogZmllbGRzVG9FeHRyYWN0O1xuICAgIG5ld0l0ZW0gPSBmaWVsZHMucmVkdWNlKChhY2MsIGN1cikgPT4gYCR7YWNjfSR7aXRlbVtjdXJdfWAsICcnKTtcbiAgfVxuICByZXR1cm4gY2FzZVNlbnNpdGl2ZSA/IG5ld0l0ZW0gOiBuZXdJdGVtLnRvTG93ZXJDYXNlKCk7XG59XG4iXX0=