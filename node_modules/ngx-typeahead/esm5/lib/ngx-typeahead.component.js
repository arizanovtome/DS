import { __decorate } from "tslib";
import { HttpClient } from '@angular/common/http';
import { ChangeDetectorRef, Component, ElementRef, EventEmitter, HostListener, Input, OnDestroy, OnInit, Output, TemplateRef, ViewChild, ViewContainerRef, } from '@angular/core';
import { of, Subject } from 'rxjs';
import { concat, debounceTime, distinctUntilChanged, filter, map, switchMap, tap, } from 'rxjs/operators';
import { Key } from './models';
import { createParamsForQuery, hasCharacters, isEnterKey, isEscapeKey, isIndexActive, resolveApiMethod, resolveNextIndex, toFormControlValue, toJsonpFinalResults, toJsonpSingleResult, validateArrowKeys, validateNonCharKeyCode, resolveItemValue, NO_INDEX, } from './ngx-typeahead.utils';
/*
 using an external template:
 <input [taItemTpl]="itemTpl" >

  <ng-template #itemTpl let-result>
    <strong>MY {{ result.result }}</strong>
  </ng-template>
*/
var NgxTypeAheadComponent = /** @class */ (function () {
    function NgxTypeAheadComponent(element, viewContainer, http, cdr) {
        this.element = element;
        this.viewContainer = viewContainer;
        this.http = http;
        this.cdr = cdr;
        this.showSuggestions = false;
        this.results = [];
        this.taUrl = '';
        this.taParams = {};
        this.taQueryParam = 'q';
        this.taApi = 'jsonp';
        this.taApiMethod = 'get';
        this.taList = [];
        this.taListItemField = [];
        this.taListItemLabel = '';
        this.taDebounce = 300;
        this.taAllowEmpty = false;
        this.taCaseSensitive = false;
        this.taDisplayOnFocus = false;
        this.taSelected = new EventEmitter();
        this.suggestionIndex = 0;
        this.subscriptions = [];
        this.activeResult = '';
        this.searchQuery = '';
        this.selectedItem = {};
        this.resultsAsItems = [];
        this.keydown$ = new Subject();
        this.keyup$ = new Subject();
    }
    NgxTypeAheadComponent.prototype.handleEsc = function (event) {
        if (isEscapeKey(event)) {
            this.hideSuggestions();
            event.preventDefault();
        }
        this.keydown$.next(event);
    };
    NgxTypeAheadComponent.prototype.onkeyup = function (event) {
        event.preventDefault();
        event.stopPropagation();
        this.keyup$.next(event);
    };
    NgxTypeAheadComponent.prototype.onClick = function () {
        if (this.taDisplayOnFocus) {
            this.displaySuggestions();
        }
    };
    NgxTypeAheadComponent.prototype.ngOnInit = function () {
        this.filterEnterEvent(this.keydown$);
        this.listenAndSuggest(this.keyup$);
        this.navigateWithArrows(this.keydown$);
        this.renderTemplate();
    };
    NgxTypeAheadComponent.prototype.ngOnDestroy = function () {
        this.keydown$.complete();
        this.keyup$.complete();
    };
    NgxTypeAheadComponent.prototype.renderTemplate = function () {
        if (!this.suggestionsTplRef) {
            console.error('NO NGXTA Template Found. Requires NG9');
            return;
        }
        this.viewContainer.createEmbeddedView(this.suggestionsTplRef);
        this.cdr.markForCheck();
    };
    NgxTypeAheadComponent.prototype.listenAndSuggest = function (obs) {
        var _this = this;
        obs
            .pipe(
        // tslint:disable-next-line: deprecation
        filter(function (e) { return validateNonCharKeyCode(e.code); }), map(toFormControlValue), debounceTime(this.taDebounce), 
        // tslint:disable-next-line: deprecation
        concat(), distinctUntilChanged(), filter(function (query) { return _this.taAllowEmpty || hasCharacters(query); }), tap(function (query) { return (_this.searchQuery = query); }), switchMap(function (query) { return _this.suggest(query); }))
            .subscribe(function (results) {
            _this.assignResults(results);
            // this.updateIndex(Key.ArrowDown);
            _this.displaySuggestions();
        });
    };
    NgxTypeAheadComponent.prototype.assignResults = function (results) {
        var labelForDisplay = this.taListItemLabel;
        this.resultsAsItems = results;
        this.results = results.map(function (item) {
            return labelForDisplay ? item[labelForDisplay] : item;
        });
        this.suggestionIndex = NO_INDEX;
        if (!results || !results.length) {
            this.activeResult = this.searchQuery;
        }
    };
    NgxTypeAheadComponent.prototype.filterEnterEvent = function (elementObs) {
        var _this = this;
        elementObs.pipe(filter(isEnterKey)).subscribe(function (event) {
            _this.handleSelectSuggestion(_this.activeResult);
        });
    };
    NgxTypeAheadComponent.prototype.navigateWithArrows = function (elementObs) {
        var _this = this;
        elementObs
            .pipe(filter(function (e) { return validateArrowKeys(e.keyCode); }), map(function (e) { return e.keyCode; }))
            .subscribe(function (keyCode) {
            _this.updateIndex(keyCode);
            _this.displaySuggestions();
        });
    };
    NgxTypeAheadComponent.prototype.updateIndex = function (keyCode) {
        this.suggestionIndex = resolveNextIndex(this.suggestionIndex, keyCode === Key.ArrowDown, this.results.length);
    };
    NgxTypeAheadComponent.prototype.displaySuggestions = function () {
        this.showSuggestions = true;
        this.cdr.markForCheck();
    };
    NgxTypeAheadComponent.prototype.suggest = function (query) {
        return this.taList.length
            ? this.createListSource(this.taList, query)
            : this.request(query);
    };
    /**
     * peforms a jsonp/http request to search with query and params
     * @param query the query to search from the remote source
     */
    NgxTypeAheadComponent.prototype.request = function (query) {
        var url = this.taUrl;
        var searchConfig = createParamsForQuery(query, this.taQueryParam, this.taParams);
        var options = {
            params: searchConfig,
        };
        var isJsonpApi = this.taApi === 'jsonp';
        return isJsonpApi
            ? this.requestJsonp(url, options, this.taCallbackParamValue)
            : this.requestHttp(url, options);
    };
    NgxTypeAheadComponent.prototype.requestHttp = function (url, options) {
        var apiMethod = resolveApiMethod(this.taApiMethod);
        return this.http[apiMethod](url, options);
    };
    NgxTypeAheadComponent.prototype.requestJsonp = function (url, options, callback) {
        if (callback === void 0) { callback = 'callback'; }
        var params = options.params.toString();
        return this.http
            .jsonp(url + "?" + params, callback)
            .pipe(map(toJsonpSingleResult), map(toJsonpFinalResults));
    };
    NgxTypeAheadComponent.prototype.markIsActive = function (index, result) {
        var isActive = isIndexActive(index, this.suggestionIndex);
        if (isActive) {
            this.activeResult = result;
        }
        return isActive;
    };
    NgxTypeAheadComponent.prototype.handleSelectionClick = function (suggestion, index) {
        this.suggestionIndex = index;
        this.handleSelectSuggestion(suggestion);
    };
    NgxTypeAheadComponent.prototype.handleSelectSuggestion = function (suggestion) {
        var result = this.resultsAsItems.length
            ? this.resultsAsItems[this.suggestionIndex]
            : suggestion;
        this.hideSuggestions();
        var resolvedResult = this.suggestionIndex === NO_INDEX ? this.searchQuery : result;
        this.taSelected.emit(resolvedResult);
    };
    NgxTypeAheadComponent.prototype.hideSuggestions = function () {
        this.showSuggestions = false;
    };
    NgxTypeAheadComponent.prototype.hasItemTemplate = function () {
        return this.taItemTpl !== undefined;
    };
    NgxTypeAheadComponent.prototype.createListSource = function (list, query) {
        var _this = this;
        var sanitizedQuery = this.taCaseSensitive ? query : query.toLowerCase();
        var fieldsToExtract = this.taListItemField;
        return of(list.filter(function (item) {
            return resolveItemValue(item, fieldsToExtract, _this.taCaseSensitive).includes(sanitizedQuery);
        }));
    };
    NgxTypeAheadComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ViewContainerRef },
        { type: HttpClient },
        { type: ChangeDetectorRef }
    ]; };
    __decorate([
        Input()
    ], NgxTypeAheadComponent.prototype, "taItemTpl", void 0);
    __decorate([
        Input()
    ], NgxTypeAheadComponent.prototype, "taUrl", void 0);
    __decorate([
        Input()
    ], NgxTypeAheadComponent.prototype, "taParams", void 0);
    __decorate([
        Input()
    ], NgxTypeAheadComponent.prototype, "taQueryParam", void 0);
    __decorate([
        Input()
    ], NgxTypeAheadComponent.prototype, "taCallbackParamValue", void 0);
    __decorate([
        Input()
    ], NgxTypeAheadComponent.prototype, "taApi", void 0);
    __decorate([
        Input()
    ], NgxTypeAheadComponent.prototype, "taApiMethod", void 0);
    __decorate([
        Input()
    ], NgxTypeAheadComponent.prototype, "taList", void 0);
    __decorate([
        Input()
    ], NgxTypeAheadComponent.prototype, "taListItemField", void 0);
    __decorate([
        Input()
    ], NgxTypeAheadComponent.prototype, "taListItemLabel", void 0);
    __decorate([
        Input()
    ], NgxTypeAheadComponent.prototype, "taDebounce", void 0);
    __decorate([
        Input()
    ], NgxTypeAheadComponent.prototype, "taAllowEmpty", void 0);
    __decorate([
        Input()
    ], NgxTypeAheadComponent.prototype, "taCaseSensitive", void 0);
    __decorate([
        Input()
    ], NgxTypeAheadComponent.prototype, "taDisplayOnFocus", void 0);
    __decorate([
        Output()
    ], NgxTypeAheadComponent.prototype, "taSelected", void 0);
    __decorate([
        ViewChild(TemplateRef, { static: true })
    ], NgxTypeAheadComponent.prototype, "suggestionsTplRef", void 0);
    __decorate([
        HostListener('keydown', ['$event'])
    ], NgxTypeAheadComponent.prototype, "handleEsc", null);
    __decorate([
        HostListener('keyup', ['$event'])
    ], NgxTypeAheadComponent.prototype, "onkeyup", null);
    __decorate([
        HostListener('click')
    ], NgxTypeAheadComponent.prototype, "onClick", null);
    NgxTypeAheadComponent = __decorate([
        Component({
            // tslint:disable-next-line: component-selector
            selector: 'ngx-typeahead, [ngxTypeahead]',
            template: "\n    <ng-template #suggestionsTplRef>\n      <section class=\"ta-results list-group\" *ngIf=\"showSuggestions\">\n        <div class=\"ta-backdrop\" (click)=\"hideSuggestions()\"></div>\n        <button\n          type=\"button\"\n          class=\"ta-item list-group-item\"\n          *ngFor=\"let result of results; let i = index\"\n          [class.active]=\"markIsActive(i, result)\"\n          (click)=\"handleSelectionClick(result, i)\"\n        >\n          <span *ngIf=\"!taItemTpl\"\n            ><i class=\"fa fa-search\"></i> {{ result }}</span\n          >\n          <ng-template\n            [ngTemplateOutlet]=\"taItemTpl\"\n            [ngTemplateOutletContext]=\"{\n              $implicit: { result: result, index: i }\n            }\"\n          ></ng-template>\n        </button>\n      </section>\n    </ng-template>\n  ",
            styles: ["\n      .ta-results {\n        position: absolute;\n      }\n      .ta-backdrop {\n        bottom: 0;\n        left: 0;\n        position: fixed;\n        right: 0;\n        top: 0;\n        z-index: 1;\n      }\n      .ta-item {\n        position: relative;\n        z-index: 2;\n        display: block;\n      }\n    "]
        })
    ], NgxTypeAheadComponent);
    return NgxTypeAheadComponent;
}());
export { NgxTypeAheadComponent };
//# sourceMappingURL=data:application/json;base64,