import { __decorate } from "tslib";
import { HttpClient } from '@angular/common/http';
import { ChangeDetectorRef, Component, ElementRef, EventEmitter, HostListener, Input, OnDestroy, OnInit, Output, TemplateRef, ViewChild, ViewContainerRef, } from '@angular/core';
import { of, Subject } from 'rxjs';
import { concat, debounceTime, distinctUntilChanged, filter, map, switchMap, tap, } from 'rxjs/operators';
import { Key } from './models';
import { createParamsForQuery, hasCharacters, isEnterKey, isEscapeKey, isIndexActive, resolveApiMethod, resolveNextIndex, toFormControlValue, toJsonpFinalResults, toJsonpSingleResult, validateArrowKeys, validateNonCharKeyCode, resolveItemValue, NO_INDEX, } from './ngx-typeahead.utils';
/*
 using an external template:
 <input [taItemTpl]="itemTpl" >

  <ng-template #itemTpl let-result>
    <strong>MY {{ result.result }}</strong>
  </ng-template>
*/
let NgxTypeAheadComponent = class NgxTypeAheadComponent {
    constructor(element, viewContainer, http, cdr) {
        this.element = element;
        this.viewContainer = viewContainer;
        this.http = http;
        this.cdr = cdr;
        this.showSuggestions = false;
        this.results = [];
        this.taUrl = '';
        this.taParams = {};
        this.taQueryParam = 'q';
        this.taApi = 'jsonp';
        this.taApiMethod = 'get';
        this.taList = [];
        this.taListItemField = [];
        this.taListItemLabel = '';
        this.taDebounce = 300;
        this.taAllowEmpty = false;
        this.taCaseSensitive = false;
        this.taDisplayOnFocus = false;
        this.taSelected = new EventEmitter();
        this.suggestionIndex = 0;
        this.subscriptions = [];
        this.activeResult = '';
        this.searchQuery = '';
        this.selectedItem = {};
        this.resultsAsItems = [];
        this.keydown$ = new Subject();
        this.keyup$ = new Subject();
    }
    handleEsc(event) {
        if (isEscapeKey(event)) {
            this.hideSuggestions();
            event.preventDefault();
        }
        this.keydown$.next(event);
    }
    onkeyup(event) {
        event.preventDefault();
        event.stopPropagation();
        this.keyup$.next(event);
    }
    onClick() {
        if (this.taDisplayOnFocus) {
            this.displaySuggestions();
        }
    }
    ngOnInit() {
        this.filterEnterEvent(this.keydown$);
        this.listenAndSuggest(this.keyup$);
        this.navigateWithArrows(this.keydown$);
        this.renderTemplate();
    }
    ngOnDestroy() {
        this.keydown$.complete();
        this.keyup$.complete();
    }
    renderTemplate() {
        if (!this.suggestionsTplRef) {
            console.error('NO NGXTA Template Found. Requires NG9');
            return;
        }
        this.viewContainer.createEmbeddedView(this.suggestionsTplRef);
        this.cdr.markForCheck();
    }
    listenAndSuggest(obs) {
        obs
            .pipe(
        // tslint:disable-next-line: deprecation
        filter((e) => validateNonCharKeyCode(e.code)), map(toFormControlValue), debounceTime(this.taDebounce), 
        // tslint:disable-next-line: deprecation
        concat(), distinctUntilChanged(), filter((query) => this.taAllowEmpty || hasCharacters(query)), tap((query) => (this.searchQuery = query)), switchMap((query) => this.suggest(query)))
            .subscribe((results) => {
            this.assignResults(results);
            // this.updateIndex(Key.ArrowDown);
            this.displaySuggestions();
        });
    }
    assignResults(results) {
        const labelForDisplay = this.taListItemLabel;
        this.resultsAsItems = results;
        this.results = results.map((item) => labelForDisplay ? item[labelForDisplay] : item);
        this.suggestionIndex = NO_INDEX;
        if (!results || !results.length) {
            this.activeResult = this.searchQuery;
        }
    }
    filterEnterEvent(elementObs) {
        elementObs.pipe(filter(isEnterKey)).subscribe((event) => {
            this.handleSelectSuggestion(this.activeResult);
        });
    }
    navigateWithArrows(elementObs) {
        elementObs
            .pipe(filter((e) => validateArrowKeys(e.keyCode)), map((e) => e.keyCode))
            .subscribe((keyCode) => {
            this.updateIndex(keyCode);
            this.displaySuggestions();
        });
    }
    updateIndex(keyCode) {
        this.suggestionIndex = resolveNextIndex(this.suggestionIndex, keyCode === Key.ArrowDown, this.results.length);
    }
    displaySuggestions() {
        this.showSuggestions = true;
        this.cdr.markForCheck();
    }
    suggest(query) {
        return this.taList.length
            ? this.createListSource(this.taList, query)
            : this.request(query);
    }
    /**
     * peforms a jsonp/http request to search with query and params
     * @param query the query to search from the remote source
     */
    request(query) {
        const url = this.taUrl;
        const searchConfig = createParamsForQuery(query, this.taQueryParam, this.taParams);
        const options = {
            params: searchConfig,
        };
        const isJsonpApi = this.taApi === 'jsonp';
        return isJsonpApi
            ? this.requestJsonp(url, options, this.taCallbackParamValue)
            : this.requestHttp(url, options);
    }
    requestHttp(url, options) {
        const apiMethod = resolveApiMethod(this.taApiMethod);
        return this.http[apiMethod](url, options);
    }
    requestJsonp(url, options, callback = 'callback') {
        const params = options.params.toString();
        return this.http
            .jsonp(`${url}?${params}`, callback)
            .pipe(map(toJsonpSingleResult), map(toJsonpFinalResults));
    }
    markIsActive(index, result) {
        const isActive = isIndexActive(index, this.suggestionIndex);
        if (isActive) {
            this.activeResult = result;
        }
        return isActive;
    }
    handleSelectionClick(suggestion, index) {
        this.suggestionIndex = index;
        this.handleSelectSuggestion(suggestion);
    }
    handleSelectSuggestion(suggestion) {
        const result = this.resultsAsItems.length
            ? this.resultsAsItems[this.suggestionIndex]
            : suggestion;
        this.hideSuggestions();
        const resolvedResult = this.suggestionIndex === NO_INDEX ? this.searchQuery : result;
        this.taSelected.emit(resolvedResult);
    }
    hideSuggestions() {
        this.showSuggestions = false;
    }
    hasItemTemplate() {
        return this.taItemTpl !== undefined;
    }
    createListSource(list, query) {
        const sanitizedQuery = this.taCaseSensitive ? query : query.toLowerCase();
        const fieldsToExtract = this.taListItemField;
        return of(list.filter((item) => {
            return resolveItemValue(item, fieldsToExtract, this.taCaseSensitive).includes(sanitizedQuery);
        }));
    }
};
NgxTypeAheadComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: ViewContainerRef },
    { type: HttpClient },
    { type: ChangeDetectorRef }
];
__decorate([
    Input()
], NgxTypeAheadComponent.prototype, "taItemTpl", void 0);
__decorate([
    Input()
], NgxTypeAheadComponent.prototype, "taUrl", void 0);
__decorate([
    Input()
], NgxTypeAheadComponent.prototype, "taParams", void 0);
__decorate([
    Input()
], NgxTypeAheadComponent.prototype, "taQueryParam", void 0);
__decorate([
    Input()
], NgxTypeAheadComponent.prototype, "taCallbackParamValue", void 0);
__decorate([
    Input()
], NgxTypeAheadComponent.prototype, "taApi", void 0);
__decorate([
    Input()
], NgxTypeAheadComponent.prototype, "taApiMethod", void 0);
__decorate([
    Input()
], NgxTypeAheadComponent.prototype, "taList", void 0);
__decorate([
    Input()
], NgxTypeAheadComponent.prototype, "taListItemField", void 0);
__decorate([
    Input()
], NgxTypeAheadComponent.prototype, "taListItemLabel", void 0);
__decorate([
    Input()
], NgxTypeAheadComponent.prototype, "taDebounce", void 0);
__decorate([
    Input()
], NgxTypeAheadComponent.prototype, "taAllowEmpty", void 0);
__decorate([
    Input()
], NgxTypeAheadComponent.prototype, "taCaseSensitive", void 0);
__decorate([
    Input()
], NgxTypeAheadComponent.prototype, "taDisplayOnFocus", void 0);
__decorate([
    Output()
], NgxTypeAheadComponent.prototype, "taSelected", void 0);
__decorate([
    ViewChild(TemplateRef, { static: true })
], NgxTypeAheadComponent.prototype, "suggestionsTplRef", void 0);
__decorate([
    HostListener('keydown', ['$event'])
], NgxTypeAheadComponent.prototype, "handleEsc", null);
__decorate([
    HostListener('keyup', ['$event'])
], NgxTypeAheadComponent.prototype, "onkeyup", null);
__decorate([
    HostListener('click')
], NgxTypeAheadComponent.prototype, "onClick", null);
NgxTypeAheadComponent = __decorate([
    Component({
        // tslint:disable-next-line: component-selector
        selector: 'ngx-typeahead, [ngxTypeahead]',
        template: `
    <ng-template #suggestionsTplRef>
      <section class="ta-results list-group" *ngIf="showSuggestions">
        <div class="ta-backdrop" (click)="hideSuggestions()"></div>
        <button
          type="button"
          class="ta-item list-group-item"
          *ngFor="let result of results; let i = index"
          [class.active]="markIsActive(i, result)"
          (click)="handleSelectionClick(result, i)"
        >
          <span *ngIf="!taItemTpl"
            ><i class="fa fa-search"></i> {{ result }}</span
          >
          <ng-template
            [ngTemplateOutlet]="taItemTpl"
            [ngTemplateOutletContext]="{
              $implicit: { result: result, index: i }
            }"
          ></ng-template>
        </button>
      </section>
    </ng-template>
  `,
        styles: [`
      .ta-results {
        position: absolute;
      }
      .ta-backdrop {
        bottom: 0;
        left: 0;
        position: fixed;
        right: 0;
        top: 0;
        z-index: 1;
      }
      .ta-item {
        position: relative;
        z-index: 2;
        display: block;
      }
    `]
    })
], NgxTypeAheadComponent);
export { NgxTypeAheadComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXR5cGVhaGVhZC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtdHlwZWFoZWFkLyIsInNvdXJjZXMiOlsibGliL25neC10eXBlYWhlYWQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDbEQsT0FBTyxFQUNMLGlCQUFpQixFQUNqQixTQUFTLEVBQ1QsVUFBVSxFQUNWLFlBQVksRUFDWixZQUFZLEVBQ1osS0FBSyxFQUNMLFNBQVMsRUFDVCxNQUFNLEVBQ04sTUFBTSxFQUNOLFdBQVcsRUFDWCxTQUFTLEVBQ1QsZ0JBQWdCLEdBQ2pCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxFQUFFLEVBQWMsT0FBTyxFQUFnQixNQUFNLE1BQU0sQ0FBQztBQUM3RCxPQUFPLEVBQ0wsTUFBTSxFQUNOLFlBQVksRUFDWixvQkFBb0IsRUFDcEIsTUFBTSxFQUNOLEdBQUcsRUFDSCxTQUFTLEVBRVQsR0FBRyxHQUNKLE1BQU0sZ0JBQWdCLENBQUM7QUFDeEIsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUMvQixPQUFPLEVBQ0wsb0JBQW9CLEVBQ3BCLGFBQWEsRUFDYixVQUFVLEVBQ1YsV0FBVyxFQUNYLGFBQWEsRUFDYixnQkFBZ0IsRUFDaEIsZ0JBQWdCLEVBQ2hCLGtCQUFrQixFQUNsQixtQkFBbUIsRUFDbkIsbUJBQW1CLEVBQ25CLGlCQUFpQixFQUNqQixzQkFBc0IsRUFDdEIsZ0JBQWdCLEVBQ2hCLFFBQVEsR0FDVCxNQUFNLHVCQUF1QixDQUFDO0FBRS9COzs7Ozs7O0VBT0U7QUFpREYsSUFBYSxxQkFBcUIsR0FBbEMsTUFBYSxxQkFBcUI7SUFnRGhDLFlBQ1UsT0FBbUIsRUFDbkIsYUFBK0IsRUFDL0IsSUFBZ0IsRUFDaEIsR0FBc0I7UUFIdEIsWUFBTyxHQUFQLE9BQU8sQ0FBWTtRQUNuQixrQkFBYSxHQUFi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QUFPLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQztvREFLakM7QUFHRDtJQURDLFlBQVksQ0FBQyxPQUFPLENBQUM7b0RBS3JCO0FBNUVVLHFCQUFxQjtJQWhEakMsU0FBUyxDQUFDO1FBQ1QsK0NBQStDO1FBQy9DLFFBQVEsRUFBRSwrQkFBK0I7UUFxQnpDLFFBQVEsRUFBRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0F1QlQ7aUJBMUNDOzs7Ozs7Ozs7Ozs7Ozs7OztLQWlCQztLQTBCSixDQUFDO0dBQ1cscUJBQXFCLENBcVBqQztTQXJQWSxxQkFBcUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHtcbiAgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gIENvbXBvbmVudCxcbiAgRWxlbWVudFJlZixcbiAgRXZlbnRFbWl0dGVyLFxuICBIb3N0TGlzdGVuZXIsXG4gIElucHV0LFxuICBPbkRlc3Ryb3ksXG4gIE9uSW5pdCxcbiAgT3V0cHV0LFxuICBUZW1wbGF0ZVJlZixcbiAgVmlld0NoaWxkLFxuICBWaWV3Q29udGFpbmVyUmVmLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IG9mLCBPYnNlcnZhYmxlLCBTdWJqZWN0LCBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7XG4gIGNvbmNhdCxcbiAgZGVib3VuY2VUaW1lLFxuICBkaXN0aW5jdFVudGlsQ2hhbmdlZCxcbiAgZmlsdGVyLFxuICBtYXAsXG4gIHN3aXRjaE1hcCxcbiAgdGFrZVVudGlsLFxuICB0YXAsXG59IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IEtleSB9IGZyb20gJy4vbW9kZWxzJztcbmltcG9ydCB7XG4gIGNyZWF0ZVBhcmFtc0ZvclF1ZXJ5LFxuICBoYXNDaGFyYWN0ZXJzLFxuICBpc0VudGVyS2V5LFxuICBpc0VzY2FwZUtleSxcbiAgaXNJbmRleEFjdGl2ZSxcbiAgcmVzb2x2ZUFwaU1ldGhvZCxcbiAgcmVzb2x2ZU5leHRJbmRleCxcbiAgdG9Gb3JtQ29udHJvbFZhbHVlLFxuICB0b0pzb25wRmluYWxSZXN1bHRzLFxuICB0b0pzb25wU2luZ2xlUmVzdWx0LFxuICB2YWxpZGF0ZUFycm93S2V5cyxcbiAgdmFsaWRhdGVOb25DaGFyS2V5Q29kZSxcbiAgcmVzb2x2ZUl0ZW1WYWx1ZSxcbiAgTk9fSU5ERVgsXG59IGZyb20gJy4vbmd4LXR5cGVhaGVhZC51dGlscyc7XG5cbi8qXG4gdXNpbmcgYW4gZXh0ZXJuYWwgdGVtcGxhdGU6XG4gPGlucHV0IFt0YUl0ZW1UcGxdPVwiaXRlbVRwbFwiID5cblxuICA8bmctdGVtcGxhdGUgI2l0ZW1UcGwgbGV0LXJlc3VsdD5cbiAgICA8c3Ryb25nPk1ZIHt7IHJlc3VsdC5yZXN1bHQgfX08L3N0cm9uZz5cbiAgPC9uZy10ZW1wbGF0ZT5cbiovXG5AQ29tcG9uZW50KHtcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBjb21wb25lbnQtc2VsZWN0b3JcbiAgc2VsZWN0b3I6ICduZ3gtdHlwZWFoZWFkLCBbbmd4VHlwZWFoZWFkXScsXG4gIHN0eWxlczogW1xuICAgIGBcbiAgICAgIC50YS1yZXN1bHRzIHtcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgfVxuICAgICAgLnRhLWJhY2tkcm9wIHtcbiAgICAgICAgYm90dG9tOiAwO1xuICAgICAgICBsZWZ0OiAwO1xuICAgICAgICBwb3NpdGlvbjogZml4ZWQ7XG4gICAgICAgIHJpZ2h0OiAwO1xuICAgICAgICB0b3A6IDA7XG4gICAgICAgIHotaW5kZXg6IDE7XG4gICAgICB9XG4gICAgICAudGEtaXRlbSB7XG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgei1pbmRleDogMjtcbiAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICB9XG4gICAgYCxcbiAgXSxcbiAgdGVtcGxhdGU6IGBcbiAgICA8bmctdGVtcGxhdGUgI3N1Z2dlc3Rpb25zVHBsUmVmPlxuICAgICAgPHNlY3Rpb24gY2xhc3M9XCJ0YS1yZXN1bHRzIGxpc3QtZ3JvdXBcIiAqbmdJZj1cInNob3dTdWdnZXN0aW9uc1wiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwidGEtYmFja2Ryb3BcIiAoY2xpY2spPVwiaGlkZVN1Z2dlc3Rpb25zKClcIj48L2Rpdj5cbiAgICAgICAgPGJ1dHRvblxuICAgICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgICAgIGNsYXNzPVwidGEtaXRlbSBsaXN0LWdyb3VwLWl0ZW1cIlxuICAgICAgICAgICpuZ0Zvcj1cImxldCByZXN1bHQgb2YgcmVzdWx0czsgbGV0IGkgPSBpbmRleFwiXG4gICAgICAgICAgW2NsYXNzLmFjdGl2ZV09XCJtYXJrSXNBY3RpdmUoaSwgcmVzdWx0KVwiXG4gICAgICAgICAgKGNsaWNrKT1cImhhbmRsZVNlbGVjdGlvbkNsaWNrKHJlc3VsdCwgaSlcIlxuICAgICAgICA+XG4gICAgICAgICAgPHNwYW4gKm5nSWY9XCIhdGFJdGVtVHBsXCJcbiAgICAgICAgICAgID48aSBjbGFzcz1cImZhIGZhLXNlYXJjaFwiPjwvaT4ge3sgcmVzdWx0IH19PC9zcGFuXG4gICAgICAgICAgPlxuICAgICAgICAgIDxuZy10ZW1wbGF0ZVxuICAgICAgICAgICAgW25nVGVtcGxhdGVPdXRsZXRdPVwidGFJdGVtVHBsXCJcbiAgICAgICAgICAgIFtuZ1RlbXBsYXRlT3V0bGV0Q29udGV4dF09XCJ7XG4gICAgICAgICAgICAgICRpbXBsaWNpdDogeyByZXN1bHQ6IHJlc3VsdCwgaW5kZXg6IGkgfVxuICAgICAgICAgICAgfVwiXG4gICAgICAgICAgPjwvbmctdGVtcGxhdGU+XG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgPC9zZWN0aW9uPlxuICAgIDwvbmctdGVtcGxhdGU+XG4gIGAsXG59KVxuZXhwb3J0IGNsYXNzIE5neFR5cGVBaGVhZENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgc2hvd1N1Z2dlc3Rpb25zID0gZmFsc2U7XG4gIHJlc3VsdHM6IHN0cmluZ1tdID0gW107XG5cbiAgQElucHV0KClcbiAgdGFJdGVtVHBsITogVGVtcGxhdGVSZWY8YW55PjtcbiAgQElucHV0KClcbiAgdGFVcmwgPSAnJztcbiAgQElucHV0KClcbiAgdGFQYXJhbXMgPSB7fTtcbiAgQElucHV0KClcbiAgdGFRdWVyeVBhcmFtID0gJ3EnO1xuICBASW5wdXQoKVxuICB0YUNhbGxiYWNrUGFyYW1WYWx1ZTtcbiAgQElucHV0KClcbiAgdGFBcGkgPSAnanNvbnAnO1xuICBASW5wdXQoKVxuICB0YUFwaU1ldGhvZCA9ICdnZXQnO1xuICBASW5wdXQoKVxuICB0YUxpc3QgPSBbXTtcbiAgQElucHV0KClcbiAgdGFMaXN0SXRlbUZpZWxkID0gW107XG4gIEBJbnB1dCgpXG4gIHRhTGlzdEl0ZW1MYWJlbCA9ICcnO1xuICBASW5wdXQoKVxuICB0YURlYm91bmNlID0gMzAwO1xuICBASW5wdXQoKVxuICB0YUFsbG93RW1wdHkgPSBmYWxzZTtcbiAgQElucHV0KClcbiAgdGFDYXNlU2Vuc2l0aXZlID0gZmFsc2U7XG4gIEBJbnB1dCgpXG4gIHRhRGlzcGxheU9uRm9jdXMgPSBmYWxzZTtcblxuICBAT3V0cHV0KClcbiAgdGFTZWxlY3RlZCA9IG5ldyBFdmVudEVtaXR0ZXI8c3RyaW5nIHwgYW55PigpO1xuXG4gIEBWaWV3Q2hpbGQoVGVtcGxhdGVSZWYsIHtzdGF0aWM6IHRydWV9KVxuICBzdWdnZXN0aW9uc1RwbFJlZjogVGVtcGxhdGVSZWY8YW55PjtcblxuICBwcml2YXRlIHN1Z2dlc3Rpb25JbmRleCA9IDA7XG4gIHByaXZhdGUgc3Vic2NyaXB0aW9uczogU3Vic2NyaXB0aW9uW10gPSBbXTtcbiAgcHJpdmF0ZSBhY3RpdmVSZXN1bHQgPSAnJztcbiAgcHJpdmF0ZSBzZWFyY2hRdWVyeSA9ICcnO1xuICBwcml2YXRlIHNlbGVjdGVkSXRlbTogYW55ID0ge307XG4gIHByaXZhdGUgcmVzdWx0c0FzSXRlbXM6IGFueVtdID0gW107XG4gIHByaXZhdGUga2V5ZG93biQgPSBuZXcgU3ViamVjdDxLZXlib2FyZEV2ZW50PigpO1xuICBwcml2YXRlIGtleXVwJCA9IG5ldyBTdWJqZWN0PEtleWJvYXJkRXZlbnQ+KCk7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBlbGVtZW50OiBFbGVtZW50UmVmLFxuICAgIHByaXZhdGUgdmlld0NvbnRhaW5lcjogVmlld0NvbnRhaW5lclJlZixcbiAgICBwcml2YXRlIGh0dHA6IEh0dHBDbGllbnQsXG4gICAgcHJpdmF0ZSBjZHI6IENoYW5nZURldGVjdG9yUmVmXG4gICkge31cblxuICBASG9zdExpc3RlbmVyKCdrZXlkb3duJywgWyckZXZlbnQnXSlcbiAgaGFuZGxlRXNjKGV2ZW50OiBLZXlib2FyZEV2ZW50KSB7XG4gICAgaWYgKGlzRXNjYXBlS2V5KGV2ZW50KSkge1xuICAgICAgdGhpcy5oaWRlU3VnZ2VzdGlvbnMoKTtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICAgIHRoaXMua2V5ZG93biQubmV4dChldmVudCk7XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCdrZXl1cCcsIFsnJGV2ZW50J10pXG4gIG9ua2V5dXAoZXZlbnQ6IEtleWJvYXJkRXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIHRoaXMua2V5dXAkLm5leHQoZXZlbnQpO1xuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcignY2xpY2snKVxuICBvbkNsaWNrKCkge1xuICAgIGlmICh0aGlzLnRhRGlzcGxheU9uRm9jdXMpIHtcbiAgICAgIHRoaXMuZGlzcGxheVN1Z2dlc3Rpb25zKCk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5maWx0ZXJFbnRlckV2ZW50KHRoaXMua2V5ZG93biQpO1xuICAgIHRoaXMubGlzdGVuQW5kU3VnZ2VzdCh0aGlzLmtleXVwJCk7XG4gICAgdGhpcy5uYXZpZ2F0ZVdpdGhBcnJvd3ModGhpcy5rZXlkb3duJCk7XG4gICAgdGhpcy5yZW5kZXJUZW1wbGF0ZSgpO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5rZXlkb3duJC5jb21wbGV0ZSgpO1xuICAgIHRoaXMua2V5dXAkLmNvbXBsZXRlKCk7XG4gIH1cblxuICByZW5kZXJUZW1wbGF0ZSgpIHtcbiAgICBpZiAoIXRoaXMuc3VnZ2VzdGlvbnNUcGxSZWYpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ05PIE5HWFRBIFRlbXBsYXRlIEZvdW5kLiBSZXF1aXJlcyBORzknKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy52aWV3Q29udGFpbmVyLmNyZWF0ZUVtYmVkZGVkVmlldyh0aGlzLnN1Z2dlc3Rpb25zVHBsUmVmKTtcbiAgICB0aGlzLmNkci5tYXJrRm9yQ2hlY2soKTtcbiAgfVxuXG4gIGxpc3RlbkFuZFN1Z2dlc3Qob2JzOiBTdWJqZWN0PEtleWJvYXJkRXZlbnQ+KSB7XG4gICAgb2JzXG4gICAgICAucGlwZShcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBkZXByZWNhdGlvblxuICAgICAgICBmaWx0ZXIoKGU6IEtleWJvYXJkRXZlbnQpID0+IHZhbGlkYXRlTm9uQ2hhcktleUNvZGUoZS5jb2RlKSksXG4gICAgICAgIG1hcCh0b0Zvcm1Db250cm9sVmFsdWUpLFxuICAgICAgICBkZWJvdW5jZVRpbWUodGhpcy50YURlYm91bmNlKSxcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBkZXByZWNhdGlvblxuICAgICAgICBjb25jYXQoKSxcbiAgICAgICAgZGlzdGluY3RVbnRpbENoYW5nZWQoKSxcbiAgICAgICAgZmlsdGVyKChxdWVyeTogc3RyaW5nKSA9PiB0aGlzLnRhQWxsb3dFbXB0eSB8fCBoYXNDaGFyYWN0ZXJzKHF1ZXJ5KSksXG4gICAgICAgIHRhcCgocXVlcnk6IHN0cmluZykgPT4gKHRoaXMuc2VhcmNoUXVlcnkgPSBxdWVyeSkpLFxuICAgICAgICBzd2l0Y2hNYXAoKHF1ZXJ5OiBzdHJpbmcpID0+IHRoaXMuc3VnZ2VzdChxdWVyeSkpXG4gICAgICApXG4gICAgICAuc3Vic2NyaWJlKChyZXN1bHRzOiBzdHJpbmdbXSB8IGFueSkgPT4ge1xuICAgICAgICB0aGlzLmFzc2lnblJlc3VsdHMocmVzdWx0cyk7XG4gICAgICAgIC8vIHRoaXMudXBkYXRlSW5kZXgoS2V5LkFycm93RG93bik7XG4gICAgICAgIHRoaXMuZGlzcGxheVN1Z2dlc3Rpb25zKCk7XG4gICAgICB9KTtcbiAgfVxuXG4gIGFzc2lnblJlc3VsdHMocmVzdWx0czogYW55W10pIHtcbiAgICBjb25zdCBsYWJlbEZvckRpc3BsYXkgPSB0aGlzLnRhTGlzdEl0ZW1MYWJlbDtcbiAgICB0aGlzLnJlc3VsdHNBc0l0ZW1zID0gcmVzdWx0cztcbiAgICB0aGlzLnJlc3VsdHMgPSByZXN1bHRzLm1hcCgoaXRlbTogc3RyaW5nIHwgYW55KSA9PlxuICAgICAgbGFiZWxGb3JEaXNwbGF5ID8gaXRlbVtsYWJlbEZvckRpc3BsYXldIDogaXRlbVxuICAgICk7XG4gICAgdGhpcy5zdWdnZXN0aW9uSW5kZXggPSBOT19JTkRFWDtcbiAgICBpZiAoIXJlc3VsdHMgfHwgIXJlc3VsdHMubGVuZ3RoKSB7XG4gICAgICB0aGlzLmFjdGl2ZVJlc3VsdCA9IHRoaXMuc2VhcmNoUXVlcnk7XG4gICAgfVxuICB9XG5cbiAgZmlsdGVyRW50ZXJFdmVudChlbGVtZW50T2JzOiBTdWJqZWN0PEtleWJvYXJkRXZlbnQ+KSB7XG4gICAgZWxlbWVudE9icy5waXBlKGZpbHRlcihpc0VudGVyS2V5KSkuc3Vic2NyaWJlKChldmVudDogS2V5Ym9hcmRFdmVudCkgPT4ge1xuICAgICAgdGhpcy5oYW5kbGVTZWxlY3RTdWdnZXN0aW9uKHRoaXMuYWN0aXZlUmVzdWx0KTtcbiAgICB9KTtcbiAgfVxuXG4gIG5hdmlnYXRlV2l0aEFycm93cyhlbGVtZW50T2JzOiBTdWJqZWN0PEtleWJvYXJkRXZlbnQ+KSB7XG4gICAgZWxlbWVudE9ic1xuICAgICAgLnBpcGUoXG4gICAgICAgIGZpbHRlcigoZTogYW55KSA9PiB2YWxpZGF0ZUFycm93S2V5cyhlLmtleUNvZGUpKSxcbiAgICAgICAgbWFwKChlOiBhbnkpID0+IGUua2V5Q29kZSlcbiAgICAgIClcbiAgICAgIC5zdWJzY3JpYmUoKGtleUNvZGU6IHN0cmluZykgPT4ge1xuICAgICAgICB0aGlzLnVwZGF0ZUluZGV4KGtleUNvZGUpO1xuICAgICAgICB0aGlzLmRpc3BsYXlTdWdnZXN0aW9ucygpO1xuICAgICAgfSk7XG4gIH1cblxuICB1cGRhdGVJbmRleChrZXlDb2RlOiBzdHJpbmcpIHtcbiAgICB0aGlzLnN1Z2dlc3Rpb25JbmRleCA9IHJlc29sdmVOZXh0SW5kZXgoXG4gICAgICB0aGlzLnN1Z2dlc3Rpb25JbmRleCxcbiAgICAgIGtleUNvZGUgPT09IEtleS5BcnJvd0Rvd24sXG4gICAgICB0aGlzLnJlc3VsdHMubGVuZ3RoXG4gICAgKTtcbiAgfVxuXG4gIGRpc3BsYXlTdWdnZXN0aW9ucygpIHtcbiAgICB0aGlzLnNob3dTdWdnZXN0aW9ucyA9IHRydWU7XG4gICAgdGhpcy5jZHIubWFya0ZvckNoZWNrKCk7XG4gIH1cblxuICBzdWdnZXN0KHF1ZXJ5OiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy50YUxpc3QubGVuZ3RoXG4gICAgICA/IHRoaXMuY3JlYXRlTGlzdFNvdXJjZSh0aGlzLnRhTGlzdCwgcXVlcnkpXG4gICAgICA6IHRoaXMucmVxdWVzdChxdWVyeSk7XG4gIH1cblxuICAvKipcbiAgICogcGVmb3JtcyBhIGpzb25wL2h0dHAgcmVxdWVzdCB0byBzZWFyY2ggd2l0aCBxdWVyeSBhbmQgcGFyYW1zXG4gICAqIEBwYXJhbSBxdWVyeSB0aGUgcXVlcnkgdG8gc2VhcmNoIGZyb20gdGhlIHJlbW90ZSBzb3VyY2VcbiAgICovXG4gIHJlcXVlc3QocXVlcnk6IHN0cmluZykge1xuICAgIGNvbnN0IHVybCA9IHRoaXMudGFVcmw7XG4gICAgY29uc3Qgc2VhcmNoQ29uZmlnID0gY3JlYXRlUGFyYW1zRm9yUXVlcnkoXG4gICAgICBxdWVyeSxcbiAgICAgIHRoaXMudGFRdWVyeVBhcmFtLFxuICAgICAgdGhpcy50YVBhcmFtc1xuICAgICk7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgIHBhcmFtczogc2VhcmNoQ29uZmlnLFxuICAgIH07XG4gICAgY29uc3QgaXNKc29ucEFwaSA9IHRoaXMudGFBcGkgPT09ICdqc29ucCc7XG4gICAgcmV0dXJuIGlzSnNvbnBBcGlcbiAgICAgID8gdGhpcy5yZXF1ZXN0SnNvbnAodXJsLCBvcHRpb25zLCB0aGlzLnRhQ2FsbGJhY2tQYXJhbVZhbHVlKVxuICAgICAgOiB0aGlzLnJlcXVlc3RIdHRwKHVybCwgb3B0aW9ucyk7XG4gIH1cblxuICByZXF1ZXN0SHR0cCh1cmw6IHN0cmluZywgb3B0aW9ucykge1xuICAgIGNvbnN0IGFwaU1ldGhvZCA9IHJlc29sdmVBcGlNZXRob2QodGhpcy50YUFwaU1ldGhvZCk7XG4gICAgcmV0dXJuIHRoaXMuaHR0cFthcGlNZXRob2RdKHVybCwgb3B0aW9ucyk7XG4gIH1cblxuICByZXF1ZXN0SnNvbnAodXJsLCBvcHRpb25zLCBjYWxsYmFjayA9ICdjYWxsYmFjaycpIHtcbiAgICBjb25zdCBwYXJhbXMgPSBvcHRpb25zLnBhcmFtcy50b1N0cmluZygpO1xuICAgIHJldHVybiB0aGlzLmh0dHBcbiAgICAgIC5qc29ucChgJHt1cmx9PyR7cGFyYW1zfWAsIGNhbGxiYWNrKVxuICAgICAgLnBpcGUobWFwKHRvSnNvbnBTaW5nbGVSZXN1bHQpLCBtYXAodG9Kc29ucEZpbmFsUmVzdWx0cykpO1xuICB9XG5cbiAgbWFya0lzQWN0aXZlKGluZGV4OiBudW1iZXIsIHJlc3VsdDogc3RyaW5nKSB7XG4gICAgY29uc3QgaXNBY3RpdmUgPSBpc0luZGV4QWN0aXZlKGluZGV4LCB0aGlzLnN1Z2dlc3Rpb25JbmRleCk7XG4gICAgaWYgKGlzQWN0aXZlKSB7XG4gICAgICB0aGlzLmFjdGl2ZVJlc3VsdCA9IHJlc3VsdDtcbiAgICB9XG4gICAgcmV0dXJuIGlzQWN0aXZlO1xuICB9XG5cbiAgaGFuZGxlU2VsZWN0aW9uQ2xpY2soc3VnZ2VzdGlvbjogc3RyaW5nLCBpbmRleDogbnVtYmVyKSB7XG4gICAgdGhpcy5zdWdnZXN0aW9uSW5kZXggPSBpbmRleDtcbiAgICB0aGlzLmhhbmRsZVNlbGVjdFN1Z2dlc3Rpb24oc3VnZ2VzdGlvbik7XG4gIH1cblxuICBoYW5kbGVTZWxlY3RTdWdnZXN0aW9uKHN1Z2dlc3Rpb246IHN0cmluZykge1xuICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMucmVzdWx0c0FzSXRlbXMubGVuZ3RoXG4gICAgICA/IHRoaXMucmVzdWx0c0FzSXRlbXNbdGhpcy5zdWdnZXN0aW9uSW5kZXhdXG4gICAgICA6IHN1Z2dlc3Rpb247XG4gICAgdGhpcy5oaWRlU3VnZ2VzdGlvbnMoKTtcbiAgICBjb25zdCByZXNvbHZlZFJlc3VsdCA9XG4gICAgICB0aGlzLnN1Z2dlc3Rpb25JbmRleCA9PT0gTk9fSU5ERVggPyB0aGlzLnNlYXJjaFF1ZXJ5IDogcmVzdWx0O1xuICAgIHRoaXMudGFTZWxlY3RlZC5lbWl0KHJlc29sdmVkUmVzdWx0KTtcbiAgfVxuXG4gIGhpZGVTdWdnZXN0aW9ucygpIHtcbiAgICB0aGlzLnNob3dTdWdnZXN0aW9ucyA9IGZhbHNlO1xuICB9XG5cbiAgaGFzSXRlbVRlbXBsYXRlKCkge1xuICAgIHJldHVybiB0aGlzLnRhSXRlbVRwbCAhPT0gdW5kZWZpbmVkO1xuICB9XG5cbiAgY3JlYXRlTGlzdFNvdXJjZShsaXN0OiBhbnlbXSwgcXVlcnk6IHN0cmluZyk6IE9ic2VydmFibGU8c3RyaW5nW10+IHtcbiAgICBjb25zdCBzYW5pdGl6ZWRRdWVyeSA9IHRoaXMudGFDYXNlU2Vuc2l0aXZlID8gcXVlcnkgOiBxdWVyeS50b0xvd2VyQ2FzZSgpO1xuICAgIGNvbnN0IGZpZWxkc1RvRXh0cmFjdCA9IHRoaXMudGFMaXN0SXRlbUZpZWxkO1xuICAgIHJldHVybiBvZihcbiAgICAgIGxpc3QuZmlsdGVyKChpdGVtOiBzdHJpbmcgfCBhbnkpID0+IHtcbiAgICAgICAgcmV0dXJuIHJlc29sdmVJdGVtVmFsdWUoXG4gICAgICAgICAgaXRlbSxcbiAgICAgICAgICBmaWVsZHNUb0V4dHJhY3QsXG4gICAgICAgICAgdGhpcy50YUNhc2VTZW5zaXRpdmVcbiAgICAgICAgKS5pbmNsdWRlcyhzYW5pdGl6ZWRRdWVyeSk7XG4gICAgICB9KVxuICAgICk7XG4gIH1cbn1cbiJdfQ==