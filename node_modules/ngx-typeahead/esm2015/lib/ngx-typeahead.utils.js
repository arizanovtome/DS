import { HttpParams } from '@angular/common/http';
import { Key } from './models';
export function validateNonCharKeyCode(keyCode) {
    return [
        Key.Enter,
        Key.Tab,
        Key.ShiftLeft,
        Key.ShiftRight,
        Key.ArrowLeft,
        Key.ArrowUp,
        Key.ArrowRight,
        Key.ArrowDown,
        Key.MetaLeft,
        Key.MetaRight,
    ].every((codeKey) => codeKey !== keyCode);
}
export function validateArrowKeys(keyCode) {
    return keyCode === Key.ArrowDown || keyCode === Key.ArrowUp;
}
export function isIndexActive(index, currentIndex) {
    return index === currentIndex;
}
export function isEnterKey(event) {
    return event.code === Key.Enter;
}
export function isEscapeKey(event) {
    // tslint:disable-next-line: deprecation
    return event.code === Key.Escape;
}
export function createParamsForQuery(query, queryParamKey = 'q', customParams = {}) {
    const searchParams = Object.assign({ [queryParamKey]: query }, customParams);
    // tslint:disable-next-line
    const setParam = (acc, param) => acc.set(param, searchParams[param]);
    const params = Object.keys(searchParams).reduce(setParam, new HttpParams());
    return params;
}
export function resolveApiMethod(method = '') {
    const isMethodValid = [
        'get',
        'post',
        'put',
        'delete',
        'patch',
        'request',
    ].some((methodName) => method === methodName);
    const apiMethod = isMethodValid ? method : 'get';
    return apiMethod;
}
export const NO_INDEX = -1;
export function resolveNextIndex(currentIndex, stepUp, listLength = 10) {
    const step = stepUp ? 1 : -1;
    const topLimit = listLength - 1;
    const bottomLimit = NO_INDEX;
    const currentResultIndex = currentIndex + step;
    let resultIndex = currentResultIndex;
    if (currentResultIndex === topLimit + 1) {
        resultIndex = bottomLimit;
    }
    if (currentResultIndex === bottomLimit - 1) {
        resultIndex = topLimit;
    }
    return resultIndex;
}
export function toJsonpSingleResult(response) {
    return response[1];
}
export function toJsonpFinalResults(results) {
    return results.map((result) => result[0]);
}
export function hasCharacters(query) {
    return query.length > 0;
}
export function toFormControlValue(e) {
    return e.target.value;
}
export function resolveItemValue(item, fieldsToExtract, caseSensitive = false) {
    let newItem = item;
    if (!item.hasOwnProperty('length')) {
        const fields = !fieldsToExtract.length
            ? Object.keys(item)
            : fieldsToExtract;
        newItem = fields.reduce((acc, cur) => `${acc}${item[cur]}`, '');
    }
    return caseSensitive ? newItem : newItem.toLowerCase();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXR5cGVhaGVhZC51dGlscy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC10eXBlYWhlYWQvIiwic291cmNlcyI6WyJsaWIvbmd4LXR5cGVhaGVhZC51dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDbEQsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUUvQixNQUFNLFVBQVUsc0JBQXNCLENBQUMsT0FBZTtJQUNwRCxPQUFPO1FBQ0wsR0FBRyxDQUFDLEtBQUs7UUFDVCxHQUFHLENBQUMsR0FBRztRQUNQLEdBQUcsQ0FBQyxTQUFTO1FBQ2IsR0FBRyxDQUFDLFVBQVU7UUFDZCxHQUFHLENBQUMsU0FBUztRQUNiLEdBQUcsQ0FBQyxPQUFPO1FBQ1gsR0FBRyxDQUFDLFVBQVU7UUFDZCxHQUFHLENBQUMsU0FBUztRQUNiLEdBQUcsQ0FBQyxRQUFRO1FBQ1osR0FBRyxDQUFDLFNBQVM7S0FDZCxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsT0FBTyxLQUFLLE9BQU8sQ0FBQyxDQUFDO0FBQzVDLENBQUM7QUFFRCxNQUFNLFVBQVUsaUJBQWlCLENBQUMsT0FBZTtJQUMvQyxPQUFPLE9BQU8sS0FBSyxHQUFHLENBQUMsU0FBUyxJQUFJLE9BQU8sS0FBSyxHQUFHLENBQUMsT0FBTyxDQUFDO0FBQzlELENBQUM7QUFFRCxNQUFNLFVBQVUsYUFBYSxDQUFDLEtBQWEsRUFBRSxZQUFvQjtJQUMvRCxPQUFPLEtBQUssS0FBSyxZQUFZLENBQUM7QUFDaEMsQ0FBQztBQUVELE1BQU0sVUFBVSxVQUFVLENBQUMsS0FBb0I7SUFDN0MsT0FBTyxLQUFLLENBQUMsSUFBSSxLQUFLLEdBQUcsQ0FBQyxLQUFLLENBQUM7QUFDbEMsQ0FBQztBQUVELE1BQU0sVUFBVSxXQUFXLENBQUMsS0FBb0I7SUFDOUMsd0NBQXdDO0lBQ3hDLE9BQU8sS0FB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QUFNLEdBQUcsQ0FBQyxlQUFlLENBQUMsTUFBTTtZQUNwQyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7WUFDbkIsQ0FBQyxDQUFDLGVBQWUsQ0FBQztRQUNwQixPQUFPLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0tBQ2pFO0lBQ0QsT0FBTyxhQUFhLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBQ3pELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwUGFyYW1zIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgS2V5IH0gZnJvbSAnLi9tb2RlbHMnO1xuXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVOb25DaGFyS2V5Q29kZShrZXlDb2RlOiBzdHJpbmcpIHtcbiAgcmV0dXJuIFtcbiAgICBLZXkuRW50ZXIsXG4gICAgS2V5LlRhYixcbiAgICBLZXkuU2hpZnRMZWZ0LFxuICAgIEtleS5TaGlmdFJpZ2h0LFxuICAgIEtleS5BcnJvd0xlZnQsXG4gICAgS2V5LkFycm93VXAsXG4gICAgS2V5LkFycm93UmlnaHQsXG4gICAgS2V5LkFycm93RG93bixcbiAgICBLZXkuTWV0YUxlZnQsXG4gICAgS2V5Lk1ldGFSaWdodCxcbiAgXS5ldmVyeSgoY29kZUtleSkgPT4gY29kZUtleSAhPT0ga2V5Q29kZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZUFycm93S2V5cyhrZXlDb2RlOiBzdHJpbmcpIHtcbiAgcmV0dXJuIGtleUNvZGUgPT09IEtleS5BcnJvd0Rvd24gfHwga2V5Q29kZSA9PT0gS2V5LkFycm93VXA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0luZGV4QWN0aXZlKGluZGV4OiBudW1iZXIsIGN1cnJlbnRJbmRleDogbnVtYmVyKSB7XG4gIHJldHVybiBpbmRleCA9PT0gY3VycmVudEluZGV4O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNFbnRlcktleShldmVudDogS2V5Ym9hcmRFdmVudCkge1xuICByZXR1cm4gZXZlbnQuY29kZSA9PT0gS2V5LkVudGVyO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNFc2NhcGVLZXkoZXZlbnQ6IEtleWJvYXJkRXZlbnQpIHtcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBkZXByZWNhdGlvblxuICByZXR1cm4gZXZlbnQuY29kZSA9PT0gS2V5LkVzY2FwZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVBhcmFtc0ZvclF1ZXJ5KFxuICBxdWVyeTogc3RyaW5nLFxuICBxdWVyeVBhcmFtS2V5ID0gJ3EnLFxuICBjdXN0b21QYXJhbXMgPSB7fVxuKSB7XG4gIGNvbnN0IHNlYXJjaFBhcmFtcyA9IHtcbiAgICBbcXVlcnlQYXJhbUtleV06IHF1ZXJ5LFxuICAgIC4uLmN1c3RvbVBhcmFtcyxcbiAgfTtcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lXG4gIGNvbnN0IHNldFBhcmFtID0gKGFjYzogSHR0cFBhcmFtcywgcGFyYW06IHN0cmluZykgPT5cbiAgICBhY2Muc2V0KHBhcmFtLCBzZWFyY2hQYXJhbXNbcGFyYW1dKTtcbiAgY29uc3QgcGFyYW1zID0gT2JqZWN0LmtleXMoc2VhcmNoUGFyYW1zKS5yZWR1Y2Uoc2V0UGFyYW0sIG5ldyBIdHRwUGFyYW1zKCkpO1xuICByZXR1cm4gcGFyYW1zO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVzb2x2ZUFwaU1ldGhvZChtZXRob2QgPSAnJykge1xuICBjb25zdCBpc01ldGhvZFZhbGlkID0gW1xuICAgICdnZXQnLFxuICAgICdwb3N0JyxcbiAgICAncHV0JyxcbiAgICAnZGVsZXRlJyxcbiAgICAncGF0Y2gnLFxuICAgICdyZXF1ZXN0JyxcbiAgXS5zb21lKChtZXRob2ROYW1lKSA9PiBtZXRob2QgPT09IG1ldGhvZE5hbWUpO1xuICBjb25zdCBhcGlNZXRob2QgPSBpc01ldGhvZFZhbGlkID8gbWV0aG9kIDogJ2dldCc7XG4gIHJldHVybiBhcGlNZXRob2Q7XG59XG5leHBvcnQgY29uc3QgTk9fSU5ERVggPSAtMTtcbmV4cG9ydCBmdW5jdGlvbiByZXNvbHZlTmV4dEluZGV4KFxuICBjdXJyZW50SW5kZXg6IG51bWJlcixcbiAgc3RlcFVwOiBib29sZWFuLFxuICBsaXN0TGVuZ3RoID0gMTBcbikge1xuICBjb25zdCBzdGVwID0gc3RlcFVwID8gMSA6IC0xO1xuICBjb25zdCB0b3BMaW1pdCA9IGxpc3RMZW5ndGggLSAxO1xuICBjb25zdCBib3R0b21MaW1pdCA9IE5PX0lOREVYO1xuICBjb25zdCBjdXJyZW50UmVzdWx0SW5kZXggPSBjdXJyZW50SW5kZXggKyBzdGVwO1xuICBsZXQgcmVzdWx0SW5kZXggPSBjdXJyZW50UmVzdWx0SW5kZXg7XG4gIGlmIChjdXJyZW50UmVzdWx0SW5kZXggPT09IHRvcExpbWl0ICsgMSkge1xuICAgIHJlc3VsdEluZGV4ID0gYm90dG9tTGltaXQ7XG4gIH1cbiAgaWYgKGN1cnJlbnRSZXN1bHRJbmRleCA9PT0gYm90dG9tTGltaXQgLSAxKSB7XG4gICAgcmVzdWx0SW5kZXggPSB0b3BMaW1pdDtcbiAgfVxuICByZXR1cm4gcmVzdWx0SW5kZXg7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0b0pzb25wU2luZ2xlUmVzdWx0KHJlc3BvbnNlOiBhbnkpIHtcbiAgcmV0dXJuIHJlc3BvbnNlWzFdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdG9Kc29ucEZpbmFsUmVzdWx0cyhyZXN1bHRzOiBhbnlbXSkge1xuICByZXR1cm4gcmVzdWx0cy5tYXAoKHJlc3VsdDogYW55KSA9PiByZXN1bHRbMF0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaGFzQ2hhcmFjdGVycyhxdWVyeTogc3RyaW5nKSB7XG4gIHJldHVybiBxdWVyeS5sZW5ndGggPiAwO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdG9Gb3JtQ29udHJvbFZhbHVlKGU6IGFueSkge1xuICByZXR1cm4gZS50YXJnZXQudmFsdWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZXNvbHZlSXRlbVZhbHVlKFxuICBpdGVtOiBzdHJpbmcgfCBhbnksXG4gIGZpZWxkc1RvRXh0cmFjdDogc3RyaW5nW10sXG4gIGNhc2VTZW5zaXRpdmUgPSBmYWxzZVxuKSB7XG4gIGxldCBuZXdJdGVtID0gaXRlbTtcbiAgaWYgKCFpdGVtLmhhc093blByb3BlcnR5KCdsZW5ndGgnKSkge1xuICAgIGNvbnN0IGZpZWxkcyA9ICFmaWVsZHNUb0V4dHJhY3QubGVuZ3RoXG4gICAgICA/IE9iamVjdC5rZXlzKGl0ZW0pXG4gICAgICA6IGZpZWxkc1RvRXh0cmFjdDtcbiAgICBuZXdJdGVtID0gZmllbGRzLnJlZHVjZSgoYWNjLCBjdXIpID0+IGAke2FjY30ke2l0ZW1bY3VyXX1gLCAnJyk7XG4gIH1cbiAgcmV0dXJuIGNhc2VTZW5zaXRpdmUgPyBuZXdJdGVtIDogbmV3SXRlbS50b0xvd2VyQ2FzZSgpO1xufVxuIl19